@startuml

rectangle PUB
rectangle MQ
rectangle SUB
database DB 

PUB -> MQ: "1. 将消息发给服务端MQ"
MQ --> DB: "2. MQ将消息落地"
MQ -> PUB: "3. MQ回ACK给发送端"

note bottom of [PUB]
如果3丢失，PUB超时后会重发消息，可能导致服务端MQ收到重复消息。
此时重发是PUB发起的，消息的处理是MQ为了避免步骤2落地重复的消息，
对每条消息，MQ系统内部必须生成一个inner-msg-id，
作为去重和幂等的依据，这个内部消息ID的特性是：
（1）全局唯一
（2）MQ生成，具备业务无关性，对消息发送方和消息接收方屏蔽

end note

MQ-> SUB: "4. MQ将消息发给接收端"
MQ-->DB: "6. MQ将落地消息删除"
SUB-> MQ: "5. SUB回ACK给MQ"

note bottom of [SUB]
接收端SUB回ACK给服务端MQ，是消息消费业务方的主动调用行为，
不能由MQ自动发起，因为MQ系统不知道消费方什么时候真正消费成功。
如果5丢失，服务端MQ超时后会重发消息，可能导致MQ收到重复的消息。
此时重发是MQ发起的，消息的处理是消息消费业务方，
消息重发势必导致业务方重复消费，为了保证业务幂等性，
业务消息体中，必须有一个biz-id，作为去重和幂等的依据，
这个业务ID的特性是：
（1）对于同一个业务场景，全局唯一
（2）由业务消息发送方生成，业务相关，对MQ透明
（3）由业务消息消费方负责判重，以保证幂等

end note


@enduml