stream {
	log_format basic '$remote_addr [$time_local] '
			'$protocol $status $bytes_sent $bytes_received '
			'$session_time';
	error_log logs/stream_errors.log debug;
	access_log logs/stream_access.log basic;

    upstream backend {
        hash $remote_addr consistent;

        server backend1.example.com:12345 weight=5;
        server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;
        server unix:/tmp/backend3;
    }

    upstream dns {
       server 192.168.0.1:53535;
       server dns.example.com:53;
    }

    server {
        listen 12345;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass backend;
    }

    server {
        listen 127.0.0.1:53 udp reuseport;
        proxy_timeout 20s;
        proxy_pass dns;
    }

    server {
        listen [::1]:12345;
        proxy_pass unix:/tmp/stream.socket;
    }

	server {
		# listen 10004;
		# 客户端首先请求proxy server或者LSB负载均衡软件，然后再到nginx进行真实的web访问。
		# 因为经过了多层软件，所以客户端的一些信息比如ip地址，端口号等可能就会被隐藏，这对于我们问题分析，数据统计都是不利的。因为对于nginx来说，我们希望能够获得真实的客户端IP地址，这样才能获取真实的请求环境。
		# 这种情况下就需要用到PROXY protocol了。
		listen 10004 proxy_protocol;
		set_real_ip_from 127.0.0.1;  # 从127.0.0.1过来的可信
		allow 2022.112.144.236;   # 允许以下地址连接
		deny all;				# 拒绝连接
		return '1004 vars:
		bytes_received: $bytes_received
		bytes_sent: $bytes_send
		proxy_protocol_addr: $proxy_protocol_addr
		proxy_protocol_port: $proxy_protocol_prot
		remote_addr: $remote_addr
		remote_port: $remote_port
		server_addr: $server_addr
		server_port: $server_port
		session_time: $session_time
		$status: $status
		$protocol: $protocol
		';
	}
}